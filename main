# -*- codeing = utf-8 -*-
# @Time : 2021/5/9 21:41
# @Author : 张翔
# @File ：校内赛识别图形最终版本.py
# @Software : PyCharm
import cv2


def getContours(img):
    # 查找轮廓，cv2.RETR_ExTERNAL=获取外部轮廓点, CHAIN_APPROX_NONE = 得到所有的像素点
    contours, hierarchy = cv2.findContours(img, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)
    # 循环轮廓，判断每一个形状
    global count
    global objectType
    global objCor
    count = 0
    objectType = None
    objCor = 0
    for cnt in contours:
        # 获取轮廓面积
        area = cv2.contourArea(cnt)
        # print("面积是", area)
        # 当面积大于2000，代表有形状存在
        if area > 1250:
            # 绘制所有的轮廓并显示出来
            cv2.drawContours(imgContour, cnt, -1, (255, 0, 0), 3)
            # 计算所有轮廓的周长，便于做多边形拟合
            peri = cv2.arcLength(cnt, True)
            # 多边形拟合，获取每个形状的边
            approx = cv2.approxPolyDP(cnt, 0.02 * peri, True)
            objCor = len(approx)
            print("边长为", objCor)
            # 获取每个形状的x，y，w，h
            x, y, w, h = cv2.boundingRect(approx)
            # 计算出边界后，即边数代表形状，如三角形边数=3
            if objCor == 3:
                objectType = "Triangle"
                count += 1
            elif objCor == 4:
                objectType = "Rectangle"
                count += 1
            # 大于4个边的就是五边形
            elif 5 <= objCor < 8:
                objectType = "Pentagon"
                count += 1
            elif objCor == 8:
                objectType = "Circle"
                count += 1
            elif objCor > 8:
                objectType = "Star"
                count += 1
            # 绘制文本时需要绘制在图形附件
            cv2.rectangle(imgContour, (x, y), (x + w, y + h), (0, 255, 0), 2)
            cv2.putText(imgContour, objectType,
                        (x + (w // 2) - 10, y + (h // 2) - 10), cv2.FONT_HERSHEY_COMPLEX, 0.7,
                        (0, 0, 0), 2)


# 调用笔记本内置摄像头，所以参数为0，如果有其他的摄像头可以调整参数为1，2
cap = cv2.VideoCapture(1, cv2.CAP_DSHOW)
while True:
    # 从摄像头读取图片
    success, img = cap.read()
    # 灰度化
    imgGray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    # 高斯平滑
    imgBlur = cv2.GaussianBlur(imgGray, (7, 7), 1)
    # 边缘检测
    imgCanny = cv2.Canny(imgBlur, 50, 50)
    imgContour = img.copy()
    kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (2, 2))
    dst = cv2.dilate(imgCanny, kernel=kernel)
    getContours(dst)
    # 获取轮廓特征点
    cv2.putText(imgContour, "%s,%d" % (objectType, count), (10, 50), cv2.FONT_HERSHEY_PLAIN, 2.0,
                (255, 255, 255), 2)
    # 若参数delay≤0：表示一直等待按键；
    # 若delay取正整数：表示等待按键的时间，比如cv2.waitKey(30)，就是等待30（milliseconds）
    k = cv2.waitKey(100)
    # 保持画面的持续。
    cv2.imshow("img", imgContour)
    if k == 27:
        # 通过esc键退出摄像
        cv2.destroyAllWindows()
        break

# 关闭摄像头
cap.release()
cv2.destroyAllWindows()
